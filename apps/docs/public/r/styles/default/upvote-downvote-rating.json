{
  "name": "upvote-downvote-rating",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/upvote-downvote-rating.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { ArrowBigDown, ArrowBigUp } from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface UpvoteDownvoteRatingProps {\n  className?: string;\n  initialUpvotes?: number;\n  initialDownvotes?: number;\n  upvotes?: number;\n  downvotes?: number;\n  upvoted?: boolean;\n  downvoted?: boolean;\n  upvoteColor?: string;\n  downvoteColor?: string;\n  readOnly?: boolean;\n  abbreviation?: boolean;\n  abbreviationLetter?: string;\n  useLocalString?: boolean;\n  defaultUpvoted?: boolean;\n  defaultDownvoted?: boolean;\n  upvotePoints?: number;\n  downvotePoints?: number;\n  onUpvoteChange?: (upvoted: boolean) => void;\n  onDownvoteChange?: (downvoted: boolean) => void;\n  onVotesChange?: (upvotes: number, downvotes: number) => void;\n}\n\nconst UpvoteDownvoteRating: React.FC<UpvoteDownvoteRatingProps> = ({\n  className,\n  initialUpvotes = 1500,\n  initialDownvotes = 0,\n  upvotes,\n  downvotes,\n  upvoted,\n  downvoted,\n  upvoteColor = \"#009e42\",\n  downvoteColor = \"#a60021\",\n  readOnly = false,\n  abbreviation = false,\n  abbreviationLetter = \"K\",\n  useLocalString = true,\n  defaultUpvoted = false,\n  defaultDownvoted = false,\n  upvotePoints = 1,\n  downvotePoints = 1,\n  onUpvoteChange,\n  onDownvoteChange,\n  onVotesChange,\n}) => {\n  const [internalUpvoted, setInternalUpvoted] = React.useState(defaultUpvoted);\n  const [internalDownvoted, setInternalDownvoted] =\n    React.useState(defaultDownvoted);\n  const [internalUpvotes, setInternalUpvotes] = React.useState(\n    Math.round(initialUpvotes),\n  );\n  const [internalDownvotes, setInternalDownvotes] = React.useState(\n    Math.round(initialDownvotes),\n  );\n\n  const isControlled =\n    upvotes !== undefined &&\n    downvotes !== undefined &&\n    upvoted !== undefined &&\n    downvoted !== undefined;\n\n  const currentUpvotes = isControlled ? upvotes : internalUpvotes;\n  const currentDownvotes = isControlled ? downvotes : internalDownvotes;\n  const currentUpvoted = isControlled ? upvoted : internalUpvoted;\n  const currentDownvoted = isControlled ? downvoted : internalDownvoted;\n\n  const handleUpvote = () => {\n    if (!readOnly) {\n      if (currentUpvoted) {\n        if (isControlled) {\n          onUpvoteChange?.(false);\n          onVotesChange?.(currentUpvotes - upvotePoints, currentDownvotes);\n        } else {\n          setInternalUpvoted(false);\n          setInternalUpvotes((prev) => prev - upvotePoints);\n        }\n      } else {\n        if (isControlled) {\n          onUpvoteChange?.(true);\n          onVotesChange?.(currentUpvotes + upvotePoints, currentDownvotes);\n          if (currentDownvoted) {\n            onDownvoteChange?.(false);\n            onVotesChange?.(\n              currentUpvotes + upvotePoints,\n              currentDownvotes - downvotePoints,\n            );\n          }\n        } else {\n          setInternalUpvoted(true);\n          setInternalUpvotes((prev) => prev + upvotePoints);\n          if (currentDownvoted) {\n            setInternalDownvoted(false);\n            setInternalDownvotes((prev) => prev - downvotePoints);\n          }\n        }\n      }\n    }\n  };\n\n  const handleDownvote = () => {\n    if (!readOnly) {\n      if (currentDownvoted) {\n        if (isControlled) {\n          onDownvoteChange?.(false);\n          onVotesChange?.(currentUpvotes, currentDownvotes - downvotePoints);\n        } else {\n          setInternalDownvoted(false);\n          setInternalDownvotes((prev) => prev - downvotePoints);\n        }\n      } else {\n        if (isControlled) {\n          onDownvoteChange?.(true);\n          onVotesChange?.(currentUpvotes, currentDownvotes + downvotePoints);\n          if (currentUpvoted) {\n            onUpvoteChange?.(false);\n            onVotesChange?.(\n              currentUpvotes - upvotePoints,\n              currentDownvotes + downvotePoints,\n            );\n          }\n        } else {\n          setInternalDownvoted(true);\n          setInternalDownvotes((prev) => prev + downvotePoints);\n          if (currentUpvoted) {\n            setInternalUpvoted(false);\n            setInternalUpvotes((prev) => prev - upvotePoints);\n          }\n        }\n      }\n    }\n  };\n\n  const formatNumber = (number: number) => {\n    if (abbreviation && number >= 1000) {\n      return (number / 1000).toFixed(1) + abbreviationLetter;\n    }\n    return useLocalString ? number.toLocaleString() : number;\n  };\n\n  const totalVotes = formatNumber(currentUpvotes - currentDownvotes);\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-row gap-0 items-middle justify-between rounded-full border\",\n        className,\n      )}\n      style={{\n        backgroundColor: currentUpvoted\n          ? upvoteColor\n          : currentDownvoted\n            ? downvoteColor\n            : \"transparent\",\n      }}\n    >\n      <div\n        className={`rounded-full p-1 ${\n          currentUpvoted && !readOnly\n            ? \"hover:bg-zinc-800/30 \"\n            : \"hover:bg-zinc-800/30\"\n        } ${readOnly ? \"cursor-auto\" : \"cursor-pointer\"}`}\n        onClick={handleUpvote}\n      >\n        <ArrowBigUp\n          size={24}\n          color=\"white\"\n          fill={currentUpvoted ? \"white\" : \"transparent\"}\n        />\n      </div>\n\n      <div className=\"p-1 min-w-8 text-center\">\n        <span>{totalVotes}</span>\n      </div>\n      <div\n        className={`rounded-full p-1 ${\n          currentDownvoted && !readOnly\n            ? \"hover:bg-zinc-800/30\"\n            : \"hover:bg-zinc-800/30\"\n        } ${readOnly ? \"cursor-auto\" : \"cursor-pointer\"}\n        `}\n        onClick={handleDownvote}\n      >\n        <ArrowBigDown\n          size={24}\n          color=\"white\"\n          fill={currentDownvoted ? \"white\" : \"transparent\"}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { UpvoteDownvoteRating };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}