{
  "name": "star-rating",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/star-rating.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport * as React from \"react\";\n\nconst StarIcon = ({\n  className,\n  filled,\n  fullColor,\n  strokeFullColor,\n  emptyColor,\n  strokeEmptyColor,\n  onClick,\n}: {\n  className?: string;\n  filled: boolean;\n  fullColor: string;\n  strokeFullColor: string;\n  emptyColor: string;\n  strokeEmptyColor: string;\n  onClick?: () => void;\n}) => (\n  <svg\n    className={cn(\"w-4 h-4 me-1 cursor-pointer\", className)}\n    aria-hidden=\"true\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 22 20\"\n    style={{\n      fill: filled ? fullColor : emptyColor,\n      stroke: filled ? strokeFullColor : strokeEmptyColor,\n      strokeWidth: \"1px\",\n    }}\n    onClick={onClick}\n  >\n    <path d=\"M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z\" />\n  </svg>\n);\n\nconst QuarterStarIcon = ({\n  id,\n  fullColor,\n  strokeFullColor,\n  emptyColor,\n  onClick,\n}: {\n  id: string;\n  fullColor: string;\n  strokeFullColor: string;\n  emptyColor: string;\n  onClick?: () => void;\n}) => (\n  <svg\n    className=\"w-4 h-4 me-1 cursor-pointer\"\n    aria-hidden=\"true\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 22 20\"\n    style={{\n      fill: fullColor,\n      stroke: strokeFullColor,\n      strokeWidth: \"1px\",\n    }}\n    onClick={onClick}\n  >\n    <defs>\n      <linearGradient\n        id={`quarter-fill-${id}`}\n        x1=\"0%\"\n        y1=\"0%\"\n        x2=\"100%\"\n        y2=\"0%\"\n      >\n        <stop offset=\"25%\" style={{ stopColor: fullColor, stopOpacity: 1 }} />\n        <stop offset=\"25%\" style={{ stopColor: emptyColor, stopOpacity: 1 }} />\n      </linearGradient>\n    </defs>\n    <path\n      fill={`url(#quarter-fill-${id})`}\n      d=\"M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z\"\n    />\n  </svg>\n);\n\nconst HalfStarIcon = ({\n  id,\n  fullColor,\n  strokeFullColor,\n  emptyColor,\n  onClick,\n}: {\n  id: string;\n  fullColor: string;\n  strokeFullColor: string;\n  emptyColor: string;\n  onClick?: () => void;\n}) => (\n  <svg\n    className=\"w-4 h-4 me-1 cursor-pointer\"\n    aria-hidden=\"true\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 22 20\"\n    style={{\n      fill: fullColor,\n      stroke: strokeFullColor,\n      strokeWidth: \"1px\",\n    }}\n    onClick={onClick}\n  >\n    <defs>\n      <linearGradient id={`half-fill-${id}`} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n        <stop offset=\"50%\" style={{ stopColor: fullColor, stopOpacity: 1 }} />\n        <stop offset=\"50%\" style={{ stopColor: emptyColor, stopOpacity: 1 }} />\n      </linearGradient>\n    </defs>\n    <path\n      fill={`url(#half-fill-${id})`}\n      d=\"M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z\"\n    />\n  </svg>\n);\n\nconst ThreeQuarterStarIcon = ({\n  id,\n  fullColor,\n  strokeFullColor,\n  emptyColor,\n  onClick,\n}: {\n  id: string;\n  fullColor: string;\n  strokeFullColor: string;\n  emptyColor: string;\n  onClick?: () => void;\n}) => (\n  <svg\n    className=\"w-4 h-4 me-1 cursor-pointer\"\n    aria-hidden=\"true\"\n    fill=\"currentColor\"\n    viewBox=\"0 0 22 20\"\n    style={{\n      fill: fullColor,\n      stroke: strokeFullColor,\n      strokeWidth: \"1px\",\n    }}\n    onClick={onClick}\n  >\n    <defs>\n      <linearGradient\n        id={`three-quarter-fill-${id}`}\n        x1=\"0%\"\n        y1=\"0%\"\n        x2=\"100%\"\n        y2=\"0%\"\n      >\n        <stop offset=\"75%\" style={{ stopColor: fullColor, stopOpacity: 1 }} />\n        <stop offset=\"75%\" style={{ stopColor: emptyColor, stopOpacity: 1 }} />\n      </linearGradient>\n    </defs>\n    <path\n      fill={`url(#three-quarter-fill-${id})`}\n      d=\"M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z\"\n    />\n  </svg>\n);\n\ninterface RatingProps {\n  id?: string;\n  rating?: number;\n  defaultRating?: number;\n  maxRating?: number;\n  fullColor?: string;\n  strokeFullColor?: string;\n  emptyColor?: string;\n  strokeEmptyColor?: string;\n  /** Called when rating changes */\n  onRatingChange?: (rating: number) => void;\n  readOnly?: boolean;\n}\n\nconst StarRating = ({\n  defaultRating = 0,\n  emptyColor = \"#D1D5DB\",\n  fullColor = \"#FFD700\",\n  id,\n  maxRating = 5,\n  onRatingChange,\n  rating,\n  readOnly = false,\n  strokeEmptyColor = \"#D1D5DB\",\n  strokeFullColor = \"#FFD700\",\n}: RatingProps) => {\n  const [internalRating, setInternalRating] = React.useState(defaultRating);\n\n  const isControlled = rating !== undefined;\n  const currentRating = isControlled ? rating : internalRating;\n\n  const handleRatingChange = (newRating: number) => {\n    console.log(\"handleRatingChange\", newRating);\n    if (!readOnly) {\n      if (!isControlled) {\n        setInternalRating(newRating);\n      }\n      onRatingChange?.(newRating);\n    }\n  };\n\n  const fullStars = Math.floor(currentRating);\n  const remainder = currentRating % 1;\n  let quarterStars = Math.round(remainder * 4);\n  if (quarterStars === 4) {\n    quarterStars = 3; // Adjust for cases where quarterStars is 4/4 and too many starts would be reduced from the emptyStars calculation below\n  }\n\n  const emptyStars = maxRating - fullStars - (quarterStars > 0 ? 1 : 0);\n\n  return (\n    <div className=\"flex items-center\">\n      {[...Array(fullStars)].map((_, index) => (\n        <StarIcon\n          key={id ? `${id}-${index}` : index}\n          filled={true}\n          fullColor={fullColor}\n          strokeFullColor={strokeFullColor}\n          emptyColor={emptyColor}\n          strokeEmptyColor={strokeEmptyColor}\n          onClick={() => handleRatingChange(index + 1)}\n          className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n        />\n      ))}\n      {quarterStars === 1 && (\n        <QuarterStarIcon\n          id={id ? `${id}-quarter` : `quarter`}\n          fullColor={fullColor}\n          strokeFullColor={strokeFullColor}\n          emptyColor={emptyColor}\n          onClick={() => handleRatingChange(fullStars + 0.25)}\n        />\n      )}\n      {quarterStars === 2 && (\n        <HalfStarIcon\n          id={id ? `${id}-half` : `half`}\n          fullColor={fullColor}\n          strokeFullColor={strokeFullColor}\n          emptyColor={emptyColor}\n          onClick={() => handleRatingChange(fullStars + 0.5)}\n        />\n      )}\n      {quarterStars === 3 && (\n        <ThreeQuarterStarIcon\n          id={id ? `${id}-three-quarter` : `three-quarter`}\n          fullColor={fullColor}\n          strokeFullColor={strokeFullColor}\n          emptyColor={emptyColor}\n          onClick={() => handleRatingChange(fullStars + 0.75)}\n        />\n      )}\n      {[...Array(emptyStars)].map((_, index) => (\n        <StarIcon\n          key={id ? `${id}-${index + fullStars + 1}` : index + fullStars + 1}\n          filled={false}\n          fullColor={fullColor}\n          strokeFullColor={strokeFullColor}\n          emptyColor={emptyColor}\n          strokeEmptyColor={strokeEmptyColor}\n          onClick={() =>\n            handleRatingChange(fullStars + quarterStars / 4 + index + 1)\n          }\n          className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n        />\n      ))}\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        {currentRating.toFixed(2)}\n      </p>\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        out of\n      </p>\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        {maxRating}\n      </p>\n    </div>\n  );\n};\n\nexport { StarRating };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}