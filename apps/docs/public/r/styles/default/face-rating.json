{
  "name": "face-rating",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/face-rating.tsx",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport {\n  AngryIcon,\n  FrownIcon,\n  LaughIcon,\n  MehIcon,\n  SmileIcon,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface TintVariantColor {\n  color: string;\n  intensity: number;\n}\n\n// You can replace this function with your own color logic or a color manipulation library\nfunction getTintVariantColor({ color, intensity }: TintVariantColor): string {\n  // Convert hex color to RGB\n  const hex = color.replace(\"#\", \"\");\n  const r = parseInt(hex.substring(0, 2), 16);\n  const g = parseInt(hex.substring(2, 4), 16);\n  const b = parseInt(hex.substring(4, 6), 16);\n\n  // Calculate new RGB values based on intensity\n  const newR = Math.round(r + (255 - r) * intensity);\n  const newG = Math.round(g + (255 - g) * intensity);\n  const newB = Math.round(b + (255 - b) * intensity);\n\n  // Convert RGB back to hex\n  const newHex = `#${((1 << 24) + (newR << 16) + (newG << 8) + newB)\n    .toString(16)\n    .slice(1)\n    .toUpperCase()}`;\n\n  return newHex;\n}\n\ninterface FaceRatingProps {\n  /** Called when rating changes */\n  onRatingChange?: (rating: number) => void;\n  /** Color from which to generate other colors */\n  baseColor?: string;\n  className?: string;\n  colors?: {\n    angry?: string;\n    frown?: string;\n    meh?: string;\n    smile?: string;\n    laugh?: string;\n  };\n  iconSize?: number;\n  id?: string;\n  /** The maximum rating. Can be any number */\n  maxRating?: number;\n  size?: number;\n  /** The value of the rating. Use with controlled component*/\n  rating?: number;\n  defaultRating?: number;\n  /** Determins whether the value can be changed */\n  readOnly?: boolean;\n}\n\nconst FaceRating = ({\n  baseColor,\n  colors = {},\n  className,\n  iconSize = 24,\n  id,\n  maxRating = 5,\n  onRatingChange,\n  rating,\n  defaultRating = 0,\n  readOnly = false,\n}: FaceRatingProps) => {\n  const [internalRating, setInternalRating] = React.useState(defaultRating);\n\n  const isControlled = rating !== undefined;\n  const currentRating = isControlled ? rating : internalRating;\n\n  const defaultColors = {\n    angry: \"red\",\n    frown: \"orange\",\n    meh: \"yellow\",\n    smile: \"lightgreen\",\n    laugh: \"green\",\n  };\n\n  const computedColors = baseColor\n    ? {\n        angry: getTintVariantColor({ color: baseColor, intensity: 0.8 }),\n        frown: getTintVariantColor({ color: baseColor, intensity: 0.6 }),\n        meh: getTintVariantColor({ color: baseColor, intensity: 0.4 }),\n        smile: getTintVariantColor({ color: baseColor, intensity: 0.2 }),\n        laugh: baseColor,\n      }\n    : defaultColors;\n\n  const mergedColors = { ...computedColors, ...colors };\n\n  const handleIconClick = (index: number) => {\n    if (!readOnly) {\n      const newRating = (index + 1) * (maxRating / 5);\n      if (!isControlled) {\n        setInternalRating(newRating);\n      }\n      onRatingChange?.(newRating);\n    }\n  };\n\n  const filledIcons = Math.round((currentRating / maxRating) * 5);\n\n  const icons = [\n    <AngryIcon\n      key=\"angry\"\n      size={iconSize}\n      color={filledIcons >= 1 ? mergedColors.angry : \"gray\"}\n      onClick={() => handleIconClick(0)}\n      className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n      style={{ cursor: readOnly ? \"auto\" : \"pointer\" }}\n    />,\n    <FrownIcon\n      key=\"frown\"\n      size={iconSize}\n      color={filledIcons >= 2 ? mergedColors.frown : \"gray\"}\n      onClick={() => handleIconClick(1)}\n      className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n      style={{ cursor: readOnly ? \"auto\" : \"pointer\" }}\n    />,\n    <MehIcon\n      key=\"meh\"\n      size={iconSize}\n      color={filledIcons >= 3 ? mergedColors.meh : \"gray\"}\n      onClick={() => handleIconClick(2)}\n      className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n      style={{ cursor: readOnly ? \"auto\" : \"pointer\" }}\n    />,\n    <SmileIcon\n      key=\"smile\"\n      size={iconSize}\n      color={filledIcons >= 4 ? mergedColors.smile : \"gray\"}\n      onClick={() => handleIconClick(3)}\n      className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n      style={{ cursor: readOnly ? \"auto\" : \"pointer\" }}\n    />,\n    <LaughIcon\n      key=\"laugh\"\n      size={iconSize}\n      color={filledIcons >= 5 ? mergedColors.laugh : \"gray\"}\n      onClick={() => handleIconClick(4)}\n      className={`transition-transform duration-200 ${readOnly ? \"\" : \"hover:scale-110\"}`}\n      style={{ cursor: readOnly ? \"auto\" : \"pointer\" }}\n    />,\n  ];\n\n  return (\n    <div className={cn(\"flex items-center gap-x-0.5\", className)}>\n      {icons}\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        {currentRating.toFixed(2)}\n      </p>\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        out of\n      </p>\n      <p className=\"ms-1 text-sm font-medium text-gray-500 dark:text-gray-400\">\n        {maxRating}\n      </p>\n    </div>\n  );\n};\n\nexport { FaceRating };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}