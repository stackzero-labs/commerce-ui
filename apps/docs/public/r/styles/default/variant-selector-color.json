{
  "name": "variant-selector-color",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-radio-group",
    "lucide-react"
  ],
  "files": [
    {
      "path": "ui/variant-selector-color.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { Circle } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface VariantItem {\n  value: string;\n  color: string;\n  label: string;\n  disabled?: boolean;\n}\n\nconst VariantSelectorColor = React.forwardRef<\n  HTMLFieldSetElement,\n  React.HTMLAttributes<HTMLFieldSetElement>\n>(({ className, ...props }, ref) => (\n  <fieldset ref={ref} className={cn(\"space-y-4\", className)} {...props} />\n));\nVariantSelectorColor.displayName = \"VariantSelectorColor\";\n\nconst VariantSelectorGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nVariantSelectorGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst VariantSelectorItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item> & {\n    autoContrast?: boolean;\n    color: string;\n  }\n>(({ className, color, autoContrast = true, children, ...props }, ref) => {\n  const textColor = autoContrast ? getContrastYIQ(color) : undefined;\n\n  console.log(\"textColor\", textColor);\n\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square size-6 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      style={{ backgroundColor: color, borderColor: color, color: textColor }}\n      {...props}\n    >\n      {children ? children : <VariantSelectorIndicator />}\n    </RadioGroupPrimitive.Item>\n  );\n});\nVariantSelectorItem.displayName = \"VariantSelectorItem\";\n\nconst VariantSelectorIndicator = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => (\n  <RadioGroupPrimitive.Indicator\n    ref={ref}\n    className={cn(\"flex items-center justify-center h-full\", className)}\n    {...props}\n  >\n    {children ? (\n      children\n    ) : (\n      <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n    )}\n  </RadioGroupPrimitive.Indicator>\n));\nVariantSelectorIndicator.displayName = \"VariantSelectorIndicator\";\n\nconst VariantSelectorLabel = React.forwardRef<\n  HTMLLabelElement,\n  React.HTMLAttributes<HTMLLabelElement>\n>(({ className, ...props }, ref) => (\n  <label\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer flex-row items-center gap-3 \",\n      className,\n    )}\n    htmlFor={props.id}\n    {...props}\n  />\n));\nVariantSelectorLabel.displayName = \"VariantSelectorLabel\";\n\nconst VariantGroupLegend = React.forwardRef<\n  HTMLLegendElement,\n  React.HTMLAttributes<HTMLLegendElement>\n>(({ className, ...props }, ref) => (\n  <legend\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium leading-none text-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nVariantGroupLegend.displayName = \"VariantGroupLegend\";\n\nexport {\n  VariantSelectorColor,\n  VariantSelectorGroup,\n  VariantSelectorItem,\n  VariantSelectorIndicator,\n  VariantSelectorLabel,\n  VariantGroupLegend,\n};\n\n/**\n * Choose the best color for text based on the background color\n * Supports HEX and RGB colors\n * @param color\n * @returns\n */\nfunction getContrastYIQ(color: string) {\n  let r, g, b;\n\n  if (color.startsWith(\"#\")) {\n    // HEX color\n    color = color.replace(\"#\", \"\");\n    r = parseInt(color.substring(0, 2), 16);\n    g = parseInt(color.substring(2, 4), 16);\n    b = parseInt(color.substring(4, 6), 16);\n  } else if (color.startsWith(\"rgb\")) {\n    // RGB color\n    const rgbValues = color.match(/\\d+/g);\n    if (!rgbValues || rgbValues.length < 3) {\n      throw new Error(\"Invalid RGB color format\");\n    }\n    r = parseInt(rgbValues[0], 10);\n    g = parseInt(rgbValues[1], 10);\n    b = parseInt(rgbValues[2], 10);\n  } else {\n    throw new Error(\"Invalid color format\");\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  return yiq >= 128 ? \"black\" : \"white\";\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}